"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
import os
import uuid
from datetime import datetime
from typing import Optional
from app.config import settings


def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"{price:.0f} —Ä—É–±"


def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    return dt.strftime("%d.%m.%Y %H:%M")


def format_date(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return dt.strftime("%d.%m.%Y")


def get_user_display_name(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.first_name and user.last_name:
        return f"{user.first_name} {user.last_name}"
    elif user.first_name:
        return user.first_name
    elif user.username:
        return f"@{user.username}"
    else:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}"


def generate_filename(original_filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    ext = os.path.splitext(original_filename)[1].lower()
    unique_name = f"{uuid.uuid4()}{ext}"
    return unique_name


async def save_file(file_content: bytes, filename: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫"""
    file_path = os.path.join(settings.upload_path, filename)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    
    with open(file_path, 'wb') as f:
        f.write(file_content)
    
    return file_path


def is_valid_image_type(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    valid_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}
    ext = os.path.splitext(filename)[1].lower()
    return ext in valid_extensions


def get_file_size_mb(file_size: int) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë"""
    return file_size / (1024 * 1024)


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def format_order_items(items) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞"""
    if not items:
        return "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π"
    
    formatted_items = []
    for item in items:
        formatted_items.append(
            f"‚Ä¢ {item.dish.name} x{item.quantity} = {format_price(item.total_price)} ‚ÇΩ"
        )
    
    return "\n".join(formatted_items)


def calculate_cart_total(cart_items) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã"""
    return sum(item.total_price for item in cart_items)


def validate_phone_number(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏
    cleaned = ''.join(c for c in phone if c.isdigit() or c in '+-()')
    return len(cleaned) >= 10


def clean_phone_number(phone: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return ''.join(c for c in phone if c.isdigit() or c == '+')


def get_order_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_emojis = {
        "cart": "üõí",
        "pending_payment": "‚è≥",
        "payment_received": "üîç", 
        "confirmed": "‚úÖ",
        "ready": "üéâ",
        "completed": "‚úÖ",
        "cancelled": "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")


def get_weekday_name(weekday: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É (1-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
    weekdays = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫", 
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞",
        7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays.get(weekday, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in settings.admin_ids


async def get_file_url(file_path: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not file_path or not os.path.exists(file_path):
        return None
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞
    # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑ CDN –∏–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    return file_path


async def save_payment_screenshot(photo, order_id: int, bot=None) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        screenshots_dir = os.path.join(settings.upload_path, "screenshots")
        os.makedirs(screenshots_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"payment_{order_id}_{uuid.uuid4().hex}.jpg"
        file_path = os.path.join(screenshots_dir, filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π bot –æ–±—ä–µ–∫—Ç
        if bot:
            await bot.download(photo, file_path)
        else:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            file_info = await photo.get_file()
            file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
            
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as resp:
                    with open(file_path, 'wb') as f:
                        f.write(await resp.read())
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        return f"screenshots/{filename}"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return ""
