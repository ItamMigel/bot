from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update, and_
from datetime import datetime

from app.database import async_session_maker, Order, OrderItem, Dish, User, OrderStatus, PaymentStatus
from app.middlewares.admin import AdminMiddleware
from app.utils.texts import ADMIN_HELP, ORDER_STATUSES
from app.utils.states import AdminStates
from app.keyboards.user import get_main_menu_keyboard
from app.services.order import OrderService
from app.utils.helpers import format_datetime

router = Router()
router.message.middleware(AdminMiddleware())
router.callback_query.middleware(AdminMiddleware())


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [
            {"text": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", "callback_data": "admin_orders_menu"},
            {"text": "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "admin_all_orders"}
        ],
        [
            {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"},
            {"text": "üçΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", "callback_data": "admin_menu"}
        ],
        [
            {"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]
    ]
    
    admin_keyboard = {"inline_keyboard": keyboard}
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_orders_menu")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    async with async_session_maker() as session:
        from sqlalchemy import func
        from app.database import Order
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for status in [
            OrderStatus.PENDING_PAYMENT.value,
            OrderStatus.PAYMENT_RECEIVED.value,
            OrderStatus.CONFIRMED.value,
            OrderStatus.READY.value,
            OrderStatus.COMPLETED.value
        ]:
            count = await session.execute(
                select(func.count(Order.id)).where(Order.status == status)
            )
            status_counts[status] = count.scalar() or 0
    
    text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:"
    
    keyboard = [
        [
            {"text": f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã ({status_counts.get(OrderStatus.PENDING_PAYMENT.value, 0)})", 
             "callback_data": f"filter_orders_{OrderStatus.PENDING_PAYMENT.value}"},
        ],
        [
            {"text": f"üí∞ –¢—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({status_counts.get(OrderStatus.PAYMENT_RECEIVED.value, 0)})", 
             "callback_data": f"filter_orders_{OrderStatus.PAYMENT_RECEIVED.value}"},
        ],
        [
            {"text": f"üë©‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ ({status_counts.get(OrderStatus.CONFIRMED.value, 0)})", 
             "callback_data": f"filter_orders_{OrderStatus.CONFIRMED.value}"},
        ],
        [
            {"text": f"üéâ –ì–æ—Ç–æ–≤—ã–µ ({status_counts.get(OrderStatus.READY.value, 0)})", 
             "callback_data": f"filter_orders_{OrderStatus.READY.value}"},
        ],
        [
            {"text": f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({status_counts.get(OrderStatus.COMPLETED.value, 0)})", 
             "callback_data": f"filter_orders_{OrderStatus.COMPLETED.value}"},
        ],
        [
            {"text": "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "filter_orders_all"},
            {"text": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", "callback_data": "filter_orders_cancelled"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("filter_orders_"))
async def show_filtered_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É"""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º filter_type - –±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "filter_orders_"
    filter_type = callback.data.replace("filter_orders_", "")
    
    async with async_session_maker() as session:
        from sqlalchemy.orm import selectinload
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        query = select(Order).options(
            selectinload(Order.user),
            selectinload(Order.items).selectinload(OrderItem.dish)
        ).order_by(Order.created_at.desc()).limit(20)
        
        if filter_type == "all":
            title = "–í—Å–µ –∑–∞–∫–∞–∑—ã"
        elif filter_type == "cancelled":
            title = "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
            query = query.where(Order.status.in_([
                OrderStatus.CANCELLED_BY_CLIENT.value,
                OrderStatus.CANCELLED_BY_MASTER.value
            ]))
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            from app.utils.texts import ORDER_STATUSES
            title = f"–ó–∞–∫–∞–∑—ã: {ORDER_STATUSES.get(filter_type, filter_type)}"
            query = query.where(Order.status == filter_type)
        
        result = await session.execute(query)
        orders = result.scalars().all()
        
        if not orders:
            text = f"üìã <b>{title}</b>\n\n‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = f"üìã <b>{title}</b>\n\n"
            
            for order in orders:
                from app.utils.helpers import format_price
                from app.utils.texts import ORDER_STATUSES
                
                status_text = ORDER_STATUSES.get(order.status, order.status)
                user_name = order.user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                text += (
                    f"üîπ <b>#{order.id}</b> | {status_text}\n"
                    f"üë§ {user_name} | üí∞ {format_price(order.total_amount)}\n"
                    f"üìÖ {format_datetime(order.created_at).split()[1]}\n\n"
                )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if orders:
            order_buttons = []
            for i, order in enumerate(orders[:10]):  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤
                order_buttons.append(
                    {"text": f"#{order.id}", "callback_data": f"admin_order_{order.id}"}
                )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥
            for i in range(0, len(order_buttons), 5):
                keyboard.append(order_buttons[i:i+5])
        
        keyboard.extend([
            [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": callback.data}],
            [{"text": "üîô –ö —Ñ–∏–ª—å—Ç—Ä–∞–º", "callback_data": "admin_orders_menu"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_admin_panel"}]
        ])
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup={"inline_keyboard": keyboard},
                parse_mode="HTML"
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
            if "message is not modified" in str(e).lower():
                await callback.answer()
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            return
    await callback.answer()


@router.callback_query(F.data == "admin_pending_orders")
async def show_pending_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    async with async_session_maker() as session:
        # –ó–∞–∫–∞–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        result = await session.execute(
            select(Order)
            .where(Order.status == OrderStatus.PAYMENT_RECEIVED.value)
            .order_by(Order.created_at.desc())
        )
        orders = result.scalars().all()
        
        if not orders:
            await callback.message.edit_text(
                "‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup={"inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}]]}
            )
            return
        
        text = "üìã <b>–ó–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
        keyboard = []
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            text += (
                f"üîπ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üë§ {username}\n"
                f"üí∞ {order.total_amount} ‚ÇΩ\n"
                f"‚è∞ {format_datetime(order.created_at)}\n\n"
            )
            
            keyboard.append([
                {"text": f"üìã –ó–∞–∫–∞–∑ #{order.id}", "callback_data": f"admin_order_{order.id}"}
            ])
        
        keyboard.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}])
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("admin_order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        result = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.id == order.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items_result = await session.execute(
            select(OrderItem, Dish)
            .join(Dish)
            .where(OrderItem.order_id == order_id)
        )
        order_items = items_result.all()
        
        username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {username}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_amount} ‚ÇΩ\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {format_datetime(order.created_at)}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {ORDER_STATUSES.get(order.status, order.status)}\n"
        )
        
        if order.payment_method:
            text += f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {'–ö–∞—Ä—Ç–∞' if order.payment_method == 'card' else '–ù–∞–ª–∏—á–Ω—ã–µ'}\n"
        
        if order.notes:
            text += f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.notes}\n"
        
        text += "\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        for item, dish in order_items:
            text += f"‚Ä¢ {dish.name} x{item.quantity} = {item.total_price} ‚ÇΩ\n"
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if order.status == OrderStatus.PAYMENT_RECEIVED.value:
            keyboard.extend([
                [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"confirm_payment_{order_id}"}],
                [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"reject_payment_{order_id}"}]
            ])
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã
            if order.payment_photo_file_id:
                keyboard.append([{"text": "üñº –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã", "callback_data": f"show_payment_photo_{order_id}"}])
        elif order.status == OrderStatus.CONFIRMED.value:
            keyboard.append([{"text": "üçΩ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤", "callback_data": f"set_ready_{order_id}"}])
        elif order.status == OrderStatus.READY.value:
            keyboard.append([{"text": "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω", "callback_data": f"set_completed_{order_id}"}])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã (–¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å)
        if order.payment_photo_file_id and order.status != OrderStatus.PAYMENT_RECEIVED.value:
            keyboard.append([{"text": "üñº –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã", "callback_data": f"show_payment_photo_{order_id}"}])
        
        # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard.append([{"text": "üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "callback_data": f"change_status_{order_id}"}])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if order.status not in [
            OrderStatus.COMPLETED.value, 
            OrderStatus.CANCELLED_BY_CLIENT.value,
            OrderStatus.CANCELLED_BY_MASTER.value
        ]:
            keyboard.append([{"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"cancel_by_master_{order_id}"}])
        
        keyboard.append([{"text": "üîô –ö –∑–∞–∫–∞–∑–∞–º", "callback_data": "admin_orders_menu"}])
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup={"inline_keyboard": keyboard},
                parse_mode="HTML"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ),
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if "no text in the message to edit" in str(e).lower() or "message to edit not found" in str(e).lower():
                try:
                    await callback.message.delete()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                await callback.bot.send_message(
                    callback.from_user.id,
                    text,
                    reply_markup={"inline_keyboard": keyboard},
                    parse_mode="HTML"
                )
            elif "message is not modified" not in str(e).lower():
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
                return
    
    await callback.answer()


@router.callback_query(F.data.startswith("admin_complete_"))
async def complete_order(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.COMPLETED.value)
        )
        await session.commit()
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    await show_order_details(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.callback_query(F.data.startswith("admin_cancel_"))
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CANCELLED_BY_MASTER.value)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        result = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        
        if order:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if user:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.bot.send_message(
                        user.telegram_id,
                        f"üö´ <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
                        f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode="HTML"
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    await callback.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
    await show_order_details(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        result = await session.execute(
            select(Order)
            .where(Order.status != OrderStatus.CART.value)
            .order_by(Order.created_at.desc())
            .limit(20)
        )
        orders = result.scalars().all()
        
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup={"inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}]]}
            )
            return
        
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        keyboard = []
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            status_emoji = {
                OrderStatus.PENDING_PAYMENT.value: "‚è≥",
                OrderStatus.PAYMENT_RECEIVED.value: "üîç",
                OrderStatus.CONFIRMED.value: "‚úÖ",
                OrderStatus.READY.value: "üçΩ",
                OrderStatus.COMPLETED.value: "‚úÖ",
                OrderStatus.CANCELLED_BY_CLIENT.value: "‚ùå",
                OrderStatus.CANCELLED_BY_MASTER.value: "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += (
                f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id} | {order.total_amount} ‚ÇΩ\n"
                f"üë§ {username} | {format_datetime(order.created_at).split()[1]}\n\n"
            )
            
            keyboard.append([
                {"text": f"üìã –ó–∞–∫–∞–∑ #{order.id}", "callback_data": f"admin_order_{order.id}"}
            ])
        
        keyboard.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}])
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )


@router.callback_query(F.data == "admin_stats")
async def show_stats_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
    
    keyboard = [
        [
            {"text": "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "callback_data": "stats_today"},
            {"text": "üìä –ó–∞ –Ω–µ–¥–µ–ª—é", "callback_data": "stats_week"}
        ],
        [
            {"text": "üìà –ó–∞ –º–µ—Å—è—Ü", "callback_data": "stats_month"},
            {"text": "üìã –ó–∞ –∫–≤–∞—Ä—Ç–∞–ª", "callback_data": "stats_quarter"}
        ],
        [
            {"text": "üìä –ó–∞ –≥–æ–¥", "callback_data": "stats_year"},
            {"text": "üéØ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "callback_data": "stats_custom"}
        ],
        [
            {"text": "üë• –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "callback_data": "stats_users"},
            {"text": "üçΩ –ü–æ –±–ª—é–¥–∞–º", "callback_data": "stats_dishes"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_admin_panel"}
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("stats_"))
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
    period = callback.data.split("_")[1]
    
    async with async_session_maker() as session:
        from sqlalchemy import func, and_, desc
        from datetime import datetime, timedelta
        
        now = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if period == "today":
            start_date = now.date()
            period_name = "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        elif period == "week":
            start_date = (now - timedelta(days=7)).date()
            period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date = (now - timedelta(days=30)).date()
            period_name = "–∑–∞ –º–µ—Å—è—Ü"
        elif period == "quarter":
            start_date = (now - timedelta(days=90)).date()
            period_name = "–∑–∞ –∫–≤–∞—Ä—Ç–∞–ª"
        elif period == "year":
            start_date = (now - timedelta(days=365)).date()
            period_name = "–∑–∞ –≥–æ–¥"
        elif period == "users":
            await show_users_stats(callback, session)
            return
        elif period == "dishes":
            await show_dishes_stats(callback, session)
            return
        else:
            await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        orders_query = select(func.count(Order.id), func.sum(Order.total_amount))
        if period != "today":
            orders_query = orders_query.where(func.date(Order.created_at) >= start_date)
        else:
            orders_query = orders_query.where(func.date(Order.created_at) == start_date)
        
        # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        completed_orders = await session.execute(
            orders_query.where(
                Order.status.in_([
                    OrderStatus.CONFIRMED.value,
                    OrderStatus.READY.value,
                    OrderStatus.COMPLETED.value
                ])
            )
        )
        completed_count, completed_sum = completed_orders.first()
        completed_sum = completed_sum or 0
        
        # –í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        all_orders = await session.execute(orders_query)
        total_count, total_sum = all_orders.first()
        total_sum = total_sum or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        status_query = select(Order.status, func.count(Order.id))
        if period != "today":
            status_query = status_query.where(func.date(Order.created_at) >= start_date)
        else:
            status_query = status_query.where(func.date(Order.created_at) == start_date)
        
        status_stats = await session.execute(
            status_query.group_by(Order.status)
        )
        
        status_text = ""
        for status, count in status_stats:
            from app.utils.texts import ORDER_STATUSES
            status_text += f"‚Ä¢ {ORDER_STATUSES.get(status, status)}: {count}\n"
        
        text = (
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}</b>\n\n"
            f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {completed_count}\n"
            f"‚Ä¢ –°—É–º–º–∞: {completed_sum} —Ä—É–±\n\n"
            f"üìä <b>–í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_count}\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±\n\n"
            f"üìã <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n{status_text}"
        )
        
        keyboard = [
            [{"text": "üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", "callback_data": "admin_stats"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_admin_panel"}]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
    await callback.answer()


async def show_users_stats(callback: CallbackQuery, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from sqlalchemy import func, desc
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    users_orders = await session.execute(
        select(
            User.first_name,
            User.last_name,
            User.username,
            func.count(Order.id).label('order_count'),
            func.sum(Order.total_amount).label('total_spent')
        )
        .join(Order, User.id == Order.user_id)
        .where(Order.status.in_([
            OrderStatus.CONFIRMED.value,
            OrderStatus.READY.value,
            OrderStatus.COMPLETED.value
        ]))
        .group_by(User.id)
        .order_by(desc('order_count'))
        .limit(10)
    )
    
    users_text = ""
    for i, (first_name, last_name, username, order_count, total_spent) in enumerate(users_orders, 1):
        name = f"{first_name or ''} {last_name or ''}".strip() or username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        users_text += f"{i}. {name}\n   üì¶ {order_count} –∑–∞–∫–∞–∑–æ–≤, üí∞ {total_spent or 0} —Ä—É–±\n\n"
    
    if not users_text:
        users_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"
    
    text = (
        f"üë• <b>–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        f"{users_text}"
    )
    
    keyboard = [
        [{"text": "üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", "callback_data": "admin_stats"}],
        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_admin_panel"}]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="HTML"
    )


async def show_dishes_stats(callback: CallbackQuery, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–ª—é–¥–∞–º"""
    from sqlalchemy import func, desc
    
    # –¢–æ–ø –±–ª—é–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    dishes_orders = await session.execute(
        select(
            Dish.name,
            func.sum(OrderItem.quantity).label('total_quantity'),
            func.count(OrderItem.id).label('order_count'),
            func.sum(OrderItem.quantity * OrderItem.price).label('total_revenue')
        )
        .join(OrderItem, Dish.id == OrderItem.dish_id)
        .join(Order, OrderItem.order_id == Order.id)
        .where(Order.status.in_([
            OrderStatus.CONFIRMED.value,
            OrderStatus.READY.value,
            OrderStatus.COMPLETED.value
        ]))
        .group_by(Dish.id)
        .order_by(desc('total_quantity'))
        .limit(10)
    )
    
    dishes_text = ""
    for i, (name, total_quantity, order_count, total_revenue) in enumerate(dishes_orders, 1):
        dishes_text += f"{i}. {name}\n   üçΩ {total_quantity} –ø–æ—Ä—Ü–∏–π –≤ {order_count} –∑–∞–∫–∞–∑–∞—Ö\n   üí∞ {total_revenue or 0} —Ä—É–±\n\n"
    
    if not dishes_text:
        dishes_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞—Ö"
    
    text = (
        f"üçΩ <b>–¢–æ–ø-10 –±–ª—é–¥</b>\n\n"
        f"{dishes_text}"
    )
    
    keyboard = [
        [{"text": "üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", "callback_data": "admin_stats"}],
        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_admin_panel"}]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_menu")
async def show_menu_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"""
    keyboard = [
        [
            {"text": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": "admin_categories"},
            {"text": "üçΩ –ë–ª—é–¥–∞", "callback_data": "admin_dishes"}
        ],
        [
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": "add_dish"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "callback_data": "back_to_admin_panel"}
        ]
    ]
    
    menu_keyboard = {"inline_keyboard": keyboard}
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_categories")
async def show_categories_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).order_by(Category.sort_order, Category.name)
        )
        categories = result.scalars().all()
        
        if not categories:
            await callback.message.edit_text(
                "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = []
        for category in categories:
            keyboard.append([{
                "text": f"üìÇ {category.name} ({'‚úÖ' if category.is_active else '‚ùå'})",
                "callback_data": f"edit_category_{category.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
        ])
        
        categories_text = "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        for category in categories:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if category.is_active else "‚ùå –°–∫—Ä—ã—Ç–∞"
            categories_text += f"‚Ä¢ {category.name} - {status}\n"
        
        await callback.message.edit_text(
            categories_text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data == "admin_dishes")
async def show_dishes_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥"""
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).order_by(Category.sort_order, Category.name)
        )
        categories = result.scalars().all()
        
        if not categories:
            await callback.message.edit_text(
                "üçΩ <b>–ë–ª—é–¥–∞</b>\n\n"
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for category in categories:
            keyboard.append([{
                "text": f"üìÇ {category.name}",
                "callback_data": f"dishes_in_category_{category.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": "add_dish"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
        ])
        
        await callback.message.edit_text(
            "üçΩ <b>–ë–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("dishes_in_category_"))
async def show_dishes_in_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = category_result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        dishes_result = await session.execute(
            select(Dish).where(Dish.category_id == category_id).order_by(Dish.name)
        )
        dishes = dishes_result.scalars().all()
        
        if not dishes:
            await callback.message.edit_text(
                f"üçΩ <b>–ë–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category.name}\"</b>\n\n"
                "‚ùå –ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": f"add_dish_{category_id}"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_dishes"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        keyboard = []
        for dish in dishes:
            keyboard.append([{
                "text": f"üçΩ {dish.name} ({'‚úÖ' if dish.is_available else '‚ùå'}) - {dish.price}‚ÇΩ",
                "callback_data": f"edit_dish_{dish.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": f"add_dish_{category_id}"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_dishes"}
        ])
        
        dishes_text = f"üçΩ <b>–ë–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category.name}\"</b>\n\n"
        for dish in dishes:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if dish.is_available else "‚ùå –°–∫—Ä—ã—Ç–æ"
            dishes_text += f"‚Ä¢ {dish.name} - {dish.price}‚ÇΩ ({status})\n"
        
        await callback.message.edit_text(
            dishes_text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("edit_category_"))
async def edit_category(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        keyboard = [
            [
                {"text": "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å" if not category.is_active else "‚ùå –°–∫—Ä—ã—Ç—å", 
                 "callback_data": f"toggle_category_{category_id}"}
            ],
            [
                {"text": "üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "callback_data": f"rename_category_{category_id}"},
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_category_{category_id}"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_categories"}
            ]
        ]
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if category.is_active else "‚ùå –°–∫—Ä—ã—Ç–∞"
        
        await callback.message.edit_text(
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üî¢ –ü–æ—Ä—è–¥–æ–∫: {category.sort_order}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.regexp(r"^edit_dish_\d+$"))
async def edit_dish(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ"""
    dish_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(Dish).where(Dish.id == dish_id)
        )
        dish = result.scalar_one_or_none()
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        keyboard = [
            [
                {"text": "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å" if not dish.is_available else "‚ùå –°–∫—Ä—ã—Ç—å", 
                 "callback_data": f"toggle_dish_{dish_id}"}
            ],
            [
                {"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "callback_data": f"edit_dish_name_{dish_id}"}
            ],
            [
                {"text": "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", "callback_data": f"edit_dish_price_{dish_id}"},
                {"text": "üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "callback_data": f"edit_dish_description_{dish_id}"}
            ],
            [
                {"text": "üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç", "callback_data": f"edit_dish_link_{dish_id}"}
            ],
            [
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_dish_{dish_id}"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": f"dishes_in_category_{dish.category_id}"}
            ]
        ]
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if dish.is_available else "‚ùå –°–∫—Ä—ã—Ç–æ"
        
        await callback.message.edit_text(
            f"üçΩ <b>{dish.name}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: {dish.price}‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {dish.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("toggle_category_"))
async def toggle_category_availability(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        category.is_active = not category.is_active
        await session.commit()
        
        status = "–ø–æ–∫–∞–∑–∞–Ω–∞" if category.is_active else "—Å–∫—Ä—ã—Ç–∞"
        await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await edit_category(callback)


@router.callback_query(F.data.startswith("toggle_dish_"))
async def toggle_dish_availability(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(Dish).where(Dish.id == dish_id)
        )
        dish = result.scalar_one_or_none()
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        dish.is_available = not dish.is_available
        await session.commit()
        
        status = "–ø–æ–∫–∞–∑–∞–Ω–æ" if dish.is_available else "—Å–∫—Ä—ã—Ç–æ"
        await callback.answer(f"‚úÖ –ë–ª—é–¥–æ {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await edit_dish(callback)


@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [
            {"text": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", "callback_data": "admin_orders_menu"},
            {"text": "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "admin_all_orders"}
        ],
        [
            {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"},
            {"text": "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", "callback_data": "admin_menu"}
        ],
        [
            {"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]
    ]
    
    admin_keyboard = {"inline_keyboard": keyboard}
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CONFIRMED.value)
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "payment_received", "confirmed"
            )
            
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


@router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CANCELLED_BY_MASTER.value)
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "payment_received", "cancelled_by_master"
            )
            
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    keyboard = [
        [{"text": "üçΩ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "callback_data": f"set_status_{order_id}_ready"}],
        [{"text": "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω", "callback_data": f"set_status_{order_id}_completed"}],
        [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"set_status_{order_id}_cancelled_by_master"}],
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_all_orders"}]
    ]
    
    await callback.message.edit_text(
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup={"inline_keyboard": keyboard}
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    parts = callback.data.split("_")
    order_id = int(parts[2])
    new_status = parts[3]
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_order = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = current_order.scalar_one_or_none()
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        old_status = order.status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=new_status)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_result = await session.execute(
            select(User).where(User.id == order.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if user:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, old_status, new_status
            )
            
        status_names = {
            "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            "ready": "–ì–æ—Ç–æ–≤–∏—Ç—Å—è", 
            "completed": "–ì–æ—Ç–æ–≤",
            "cancelled_by_master": "–û—Ç–º–µ–Ω–µ–Ω"
        }
        
        await callback.answer(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_names.get(new_status, new_status)}", 
            show_alert=True
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await show_all_orders(callback)


@router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_cash_order(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status="confirmed")
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "pending_confirmation", "confirmed"
            )
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


@router.callback_query(F.data.startswith("reject_order_"))
async def reject_cash_order(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CANCELLED_BY_MASTER.value)
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "pending_confirmation", "cancelled_by_master"
            )
            
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

@router.callback_query(F.data == "add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "üìÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.ENTERING_CATEGORY_NAME)
    await callback.answer()


@router.message(StateFilter(AdminStates.ENTERING_CATEGORY_NAME))
async def handle_category_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)"""
    category_name = message.text.strip()
    
    if len(category_name) < 2 or len(category_name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    category_id = data.get("category_id")
    
    async with async_session_maker() as session:
        from app.database import Category
        
        if category_id:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = await session.get(Category, category_id)
            if not category:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing = await session.execute(
                select(Category).where(Category.name == category_name, Category.id != category_id)
            )
            if existing.scalar_one_or_none():
                await message.answer(
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                return
            
            old_name = category.name
            category.name = category_name
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{category_name}'!",
                reply_markup={"inline_keyboard": [[
                    {"text": "üìÇ –ö —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "callback_data": "admin_categories"}
                ]]}
            )
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing = await session.execute(
                select(Category).where(Category.name == category_name)
            )
            if existing.scalar_one_or_none():
                await message.answer(
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(
                name=category_name,
                is_active=True,
                sort_order=0
            )
            session.add(new_category)
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup={"inline_keyboard": [[
                    {"text": "üìÇ –ö —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "callback_data": "admin_categories"}
                ]]}
            )
    
    await state.clear()


@router.callback_query(F.data.startswith("rename_category_"))
async def rename_category_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        category = await session.get(Category, category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üìÇ <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_CATEGORY_NAME)
        await state.update_data(category_id=category_id)
        await callback.answer()


@router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category, Dish
        
        category = await session.get(Category, category_id)
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        dishes_result = await session.execute(
            select(Dish).where(Dish.category_id == category_id)
        )
        dishes_count = len(dishes_result.scalars().all())
        
        warning_text = ""
        if dishes_count > 0:
            warning_text = f"\n\n‚ö†Ô∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {dishes_count} –±–ª—é–¥. –û–Ω–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
        
        await callback.message.edit_text(
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category.name}'</b>?{warning_text}",
            reply_markup={"inline_keyboard": [
                [
                    {"text": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": f"confirm_delete_category_{category_id}"},
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "admin_categories"}
                ]
            ]},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def delete_category_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Category, Dish
        
        category = await session.get(Category, category_id)
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        category_name = category.name
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        dishes_result = await session.execute(
            select(Dish).where(Dish.category_id == category_id)
        )
        dishes = dishes_result.scalars().all()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ
        for dish in dishes:
            await session.delete(dish)
        
        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await session.delete(category)
        await session.commit()
        
        dishes_count = len(dishes)
        dishes_text = f" –∏ {dishes_count} –±–ª—é–¥" if dishes_count > 0 else ""
        
        await callback.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}'{dishes_text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup={"inline_keyboard": [[
                {"text": "üìÇ –ö —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "callback_data": "admin_categories"}
            ]]}
        )
        await callback.answer()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–Æ–î–ê–ú–ò ===

@router.callback_query(F.data == "add_dish")
async def choose_category_for_dish(callback: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞"""
    async with async_session_maker() as session:
        from app.database import Category
        
        categories_result = await session.execute(
            select(Category).where(Category.is_active == True).order_by(Category.sort_order, Category.name)
        )
        categories = categories_result.scalars().all()
        
        if not categories:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
            return
        
        keyboard = []
        for category in categories:
            keyboard.append([{
                "text": f"üìÇ {category.name}",
                "callback_data": f"add_dish_{category.id}"
            }])
        
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
        ])
        
        await callback.message.edit_text(
            "üçΩ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("add_dish_"))
async def add_dish_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        category = await session.get(Category, category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üçΩ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_DISH_NAME)
        await state.update_data(category_id=category_id)
        await callback.answer()


@router.message(StateFilter(AdminStates.ENTERING_DISH_NAME))
async def add_dish_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    dish_name = message.text.strip()
    
    if len(dish_name) < 2 or len(dish_name) > 150:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    dish_id = data.get("dish_id")
    
    if dish_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞ - –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        async with async_session_maker() as session:
            from app.database import Dish
            
            dish = await session.get(Dish, dish_id)
            if not dish:
                await message.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª—é–¥–æ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            from sqlalchemy import select, and_
            existing_dish = await session.execute(
                select(Dish).where(
                    and_(
                        Dish.category_id == dish.category_id,
                        Dish.name == dish_name,
                        Dish.id != dish_id  # –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±–ª—é–¥–æ
                    )
                )
            )
            if existing_dish.scalar_one_or_none():
                await message.answer(
                    "‚ùå –ë–ª—é–¥–æ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            old_name = dish.name
            dish.name = dish_name
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n"
                f"–ë—ã–ª–æ: <b>{old_name}</b>\n"
                f"–°—Ç–∞–ª–æ: <b>{dish_name}</b>",
                parse_mode="HTML",
                reply_markup={"inline_keyboard": [[
                    {"text": "üçΩ –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±–ª—é–¥–∞", "callback_data": f"edit_dish_{dish_id}"}
                ]]}
            )
            
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        await state.update_data(dish_name=dish_name)
        await state.set_state(AdminStates.ENTERING_DISH_PRICE)
        await message.answer(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ '{dish_name}' (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 350):"
        )


@router.message(StateFilter(AdminStates.ENTERING_DISH_PRICE))
async def handle_dish_price_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω—ã –±–ª—é–¥–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    try:
        new_price = float(message.text.strip())
        if new_price <= 0 or new_price > 100000:
            await message.answer(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –¥–æ 100000.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 350):"
        )
        return
    
    data = await state.get_data()
    dish_id = data.get("dish_id")
    
    if dish_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞
        async with async_session_maker() as session:
            from app.database import Dish
            
            dish = await session.get(Dish, dish_id)
            if not dish:
                await message.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
                return
            
            old_price = dish.price
            dish.price = new_price
            await session.commit()
            
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ –±–ª—é–¥–∞ '{dish.name}' –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_price} ‚ÇΩ –Ω–∞ {new_price} ‚ÇΩ!",
                reply_markup={"inline_keyboard": [[
                    {"text": "üçΩ –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±–ª—é–¥–∞", "callback_data": f"edit_dish_{dish_id}"}
                ]]}
            )
        await state.clear()
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        await state.update_data(dish_price=new_price)
        await state.set_state(AdminStates.ENTERING_DISH_DESCRIPTION)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )


@router.message(StateFilter(AdminStates.ENTERING_DISH_DESCRIPTION))
async def handle_dish_description_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    new_description = message.text.strip()
    if new_description == "-":
        new_description = None
    elif len(new_description) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    dish_id = data.get("dish_id")
    
    if dish_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞
        async with async_session_maker() as session:
            from app.database import Dish
            
            dish = await session.get(Dish, dish_id)
            if not dish:
                await message.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
                return
            
            dish.description = new_description
            await session.commit()
            
            desc_text = new_description or "—É–¥–∞–ª–µ–Ω–æ"
            await message.answer(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ '{dish.name}' –∏–∑–º–µ–Ω–µ–Ω–æ!\n"
                f"üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {desc_text}",
                reply_markup={"inline_keyboard": [[
                    {"text": "üçΩ –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±–ª—é–¥–∞", "callback_data": f"edit_dish_{dish_id}"}
                ]]}
            )
        await state.clear()
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        await state.update_data(dish_description=new_description)
        await state.set_state(AdminStates.ENTERING_DISH_LINK)
        await message.answer(
            "ÔøΩ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )


@router.message(StateFilter(AdminStates.ENTERING_DISH_LINK))
async def handle_dish_link_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç –æ –±–ª—é–¥–µ"""
    new_link = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if new_link == "-":
        new_link = None
    elif new_link and not (new_link.startswith("https://t.me/") or new_link.startswith("http://t.me/")):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
        )
        return
    
    data = await state.get_data()
    dish_id = data.get("dish_id")
    
    if dish_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª—é–¥–∞
        async with async_session_maker() as session:
            from app.database import Dish
            
            dish = await session.get(Dish, dish_id)
            if not dish:
                await message.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
                return
            
            dish.telegram_post_url = new_link
            await session.commit()
            
            link_text = new_link or "—É–¥–∞–ª–µ–Ω–∞"
            await message.answer(
                f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–ª—è –±–ª—é–¥–∞ '{dish.name}' –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
                f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {link_text}",
                reply_markup={"inline_keyboard": [[
                    {"text": "üçΩ –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±–ª—é–¥–∞", "callback_data": f"edit_dish_{dish_id}"}
                ]]}
            )
        await state.clear()
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        category_id = data.get("category_id")
        dish_name = data.get("dish_name")
        dish_price = data.get("dish_price")
        dish_description = data.get("dish_description")
        
        if not category_id or not dish_name or dish_price is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥–∞")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        async with async_session_maker() as session:
            from app.database import Dish, Category
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = await session.get(Category, category_id)
            if not category:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
            new_dish = Dish(
                name=dish_name,
                price=dish_price,
                description=dish_description,
                category_id=category_id,
                telegram_post_url=new_link,
                is_available=True
            )
            session.add(new_dish)
            await session.commit()
            await session.refresh(new_dish)
            
            link_text = f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {new_link}\n" if new_link else ""
            await message.answer(
                f"‚úÖ <b>–ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {dish_name}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {dish_price} ‚ÇΩ\n"
                f"ÔøΩ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.name}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {dish_description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"{link_text}",
                parse_mode="HTML",
                reply_markup={"inline_keyboard": [[
                    {"text": "üçΩ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ", "callback_data": f"edit_dish_{new_dish.id}"},
                    {"text": "üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": f"dishes_in_category_{category_id}"}
                ]]}
            )
        
        await state.clear()


@router.callback_query(F.data.startswith("edit_dish_price_"))
async def edit_dish_price_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Dish
        dish = await session.get(Dish, dish_id)
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–ª—é–¥–∞</b>\n\n"
            f"–ë–ª—é–¥–æ: <b>{dish.name}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{dish.price} ‚ÇΩ</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_DISH_PRICE)
        await state.update_data(dish_id=dish_id)
        await callback.answer()


@router.callback_query(F.data.startswith("edit_dish_name_"))
async def edit_dish_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Dish
        dish = await session.get(Dish, dish_id)
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{dish.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_DISH_NAME)
        await state.update_data(dish_id=dish_id)
        await callback.answer()


@router.callback_query(F.data.startswith("edit_dish_description_"))
async def edit_dish_description_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Dish
        dish = await session.get(Dish, dish_id)
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        current_desc = dish.description or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        await callback.message.edit_text(
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞</b>\n\n"
            f"–ë–ª—é–¥–æ: <b>{dish.name}</b>\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{current_desc}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_DISH_DESCRIPTION)
        await state.update_data(dish_id=dish_id)
        await callback.answer()


@router.callback_query(F.data.startswith("edit_dish_link_"))
async def edit_dish_link_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç –æ –±–ª—é–¥–µ"""
    dish_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Dish
        dish = await session.get(Dish, dish_id)
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        current_link = dish.telegram_post_url or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        await callback.message.edit_text(
            f"üîó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç</b>\n\n"
            f"–ë–ª—é–¥–æ: <b>{dish.name}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: <b>{current_link}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª–µ\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/your_channel/123)\n"
            f"–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.ENTERING_DISH_LINK)
        await state.update_data(dish_id=dish_id)
        await callback.answer()


@router.callback_query(F.data.startswith("delete_dish_"))
async def delete_dish_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Dish
        
        dish = await session.get(Dish, dish_id)
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ <b>'{dish.name}'</b>?\n"
            f"üí∞ –¶–µ–Ω–∞: {dish.price} ‚ÇΩ",
            reply_markup={"inline_keyboard": [
                [
                    {"text": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": f"confirm_delete_dish_{dish_id}"},
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": f"edit_dish_{dish_id}"}
                ]
            ]},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_dish_"))
async def delete_dish_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Dish, OrderItem
        
        dish = await session.get(Dish, dish_id)
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        dish_name = dish.name
        category_id = dish.category_id
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ order_items
        order_items_result = await session.execute(
            select(OrderItem).where(OrderItem.dish_id == dish_id)
        )
        order_items = order_items_result.scalars().all()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π order_item
        for order_item in order_items:
            await session.delete(order_item)
        
        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º–æ –±–ª—é–¥–æ
        await session.delete(dish)
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup={"inline_keyboard": [[
                {"text": "üçΩ –ö –±–ª—é–¥–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": f"dishes_in_category_{category_id}"}
            ]]}
        )
        await callback.answer()


@router.callback_query(F.data.startswith("set_ready_"))
async def set_order_ready(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ '–≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.READY.value)
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            try:
                await callback.bot.send_message(
                    user.telegram_id,
                    f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!\n\n"
                    f"–ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {order.total_amount} ‚ÇΩ"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_completed_"))
async def set_order_completed(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ '–≤—ã–ø–æ–ª–Ω–µ–Ω'"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(
                status=OrderStatus.COMPLETED.value,
                completed_at=datetime.utcnow()
            )
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            try:
                await callback.bot.send_message(
                    user.telegram_id,
                    f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {order.total_amount} ‚ÇΩ\n"
                    f"–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üòä"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel_by_master_"))
async def cancel_order_by_master(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–∞—Å—Ç–µ—Ä–æ–º"""
    order_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CANCELLED_BY_MASTER.value)
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
            try:
                await callback.bot.send_message(
                    user.telegram_id,
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω—ë–Ω.\n\n"
                    f"–°—É–º–º–∞ {order.total_amount} ‚ÇΩ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\n"
                    f"–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("show_payment_photo_"))
async def show_payment_photo(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    order_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Order
        order = await session.get(Order, order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if not order.payment_photo_file_id:
            await callback.answer("‚ùå –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=order.payment_photo_file_id,
                caption=f"üí∞ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\nüìã –ó–∞–∫–∞–∑ #{order.id}\nüí≥ –°—É–º–º–∞: {order.total_amount} —Ä—É–±",
                reply_markup={
                    "inline_keyboard": [
                        [{"text": "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", "callback_data": f"admin_order_{order_id}"}]
                    ]
                }
            )
            await callback.answer()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ", show_alert=True)
