from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, update, and_

from app.database import async_session_maker, Order, OrderItem, Dish, User, OrderStatus, PaymentStatus
from app.middlewares.admin import AdminMiddleware
from app.utils.texts import ADMIN_HELP, ORDER_STATUSES
from app.keyboards.user import get_main_menu_keyboard
from app.services.order import OrderService

router = Router()
router.message.middleware(AdminMiddleware())
router.callback_query.middleware(AdminMiddleware())


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [
            {"text": "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "callback_data": "admin_pending_orders"},
            {"text": "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "admin_all_orders"}
        ],
        [
            {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"},
            {"text": "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", "callback_data": "admin_menu"}
        ],
        [
            {"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]
    ]
    
    admin_keyboard = {"inline_keyboard": keyboard}
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_pending_orders")
async def show_pending_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    async with async_session_maker() as session:
        # –ó–∞–∫–∞–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        result = await session.execute(
            select(Order)
            .where(Order.status == OrderStatus.PAYMENT_CONFIRMATION.value)
            .order_by(Order.created_at.desc())
        )
        orders = result.scalars().all()
        
        if not orders:
            await callback.message.edit_text(
                "‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup={"inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_panel"}]]}
            )
            return
        
        text = "üìã <b>–ó–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
        keyboard = []
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            text += (
                f"üîπ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üë§ {username}\n"
                f"üí∞ {order.total_amount} ‚ÇΩ\n"
                f"‚è∞ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
            
            keyboard.append([
                {"text": f"üìã –ó–∞–∫–∞–∑ #{order.id}", "callback_data": f"admin_order_{order.id}"}
            ])
        
        keyboard.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_panel"}])
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("admin_order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        result = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.id == order.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items_result = await session.execute(
            select(OrderItem, Dish)
            .join(Dish)
            .where(OrderItem.order_id == order_id)
        )
        order_items = items_result.all()
        
        username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {username}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order.total_amount} ‚ÇΩ\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {ORDER_STATUSES.get(order.status, order.status)}\n"
        )
        
        if order.payment_method:
            text += f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {'–ö–∞—Ä—Ç–∞' if order.payment_method == 'card' else '–ù–∞–ª–∏—á–Ω—ã–µ'}\n"
        
        if order.notes:
            text += f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.notes}\n"
        
        text += "\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        for item, dish in order_items:
            text += f"‚Ä¢ {dish.name} x{item.quantity} = {item.total_price} ‚ÇΩ\n"
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if order.status == OrderStatus.PAYMENT_CONFIRMATION.value:
            keyboard.extend([
                [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"confirm_payment_{order_id}"}],
                [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", "callback_data": f"reject_payment_{order_id}"}]
            ])
        elif order.status == OrderStatus.CONFIRMED.value:
            keyboard.append([{"text": "üçΩ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤", "callback_data": f"set_status_{order_id}_ready"}])
        elif order.status == OrderStatus.READY.value:
            keyboard.append([{"text": "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω", "callback_data": f"set_status_{order_id}_completed"}])
        
        # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard.append([{"text": "üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "callback_data": f"change_status_{order_id}"}])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if order.status not in [OrderStatus.COMPLETED.value, OrderStatus.CANCELLED.value]:
            keyboard.append([{"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"set_status_{order_id}_cancelled"}])
        
        keyboard.append([{"text": "üîô –ö –∑–∞–∫–∞–∑–∞–º", "callback_data": "admin_pending_orders"}])
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
    
    await callback.answer("üçΩ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π!")
    await show_order_details(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.callback_query(F.data.startswith("admin_complete_"))
async def complete_order(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.COMPLETED.value)
        )
        await session.commit()
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    await show_order_details(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.callback_query(F.data.startswith("admin_cancel_"))
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[-1])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=OrderStatus.CANCELLED.value)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        result = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        
        if order:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if user:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.bot.send_message(
                        user.telegram_id,
                        f"üö´ <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
                        f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode="HTML"
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    await callback.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
    await show_order_details(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞


@router.callback_query(F.data == "admin_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        result = await session.execute(
            select(Order)
            .where(Order.status != OrderStatus.CART.value)
            .order_by(Order.created_at.desc())
            .limit(20)
        )
        orders = result.scalars().all()
        
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup={"inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_panel"}]]}
            )
            return
        
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        keyboard = []
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.id == order.user_id)
            )
            user = user_result.scalar_one_or_none()
            
            username = f"@{user.username}" if user and user.username else f"ID: {user.telegram_id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            status_emoji = {
                OrderStatus.PENDING_PAYMENT.value: "‚è≥",
                OrderStatus.PAYMENT_CONFIRMATION.value: "üîç",
                OrderStatus.CONFIRMED.value: "‚úÖ",
                OrderStatus.READY.value: "üçΩ",
                OrderStatus.COMPLETED.value: "‚úÖ",
                OrderStatus.CANCELLED.value: "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += (
                f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id} | {order.total_amount} ‚ÇΩ\n"
                f"üë§ {username} | {order.created_at.strftime('%d.%m %H:%M')}\n\n"
            )
            
            keyboard.append([
                {"text": f"üìã –ó–∞–∫–∞–∑ #{order.id}", "callback_data": f"admin_order_{order.id}"}
            ])
        
        keyboard.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_panel"}])
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )


@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_session_maker() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        from sqlalchemy import func, and_
        from datetime import datetime, timedelta
        
        today = datetime.now().date()
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_orders = await session.execute(
            select(func.count(Order.id), func.sum(Order.total_amount))
            .where(
                and_(
                    func.date(Order.created_at) == today,
                    Order.status.in_([
                        OrderStatus.CONFIRMED.value,
                        OrderStatus.READY.value,
                        OrderStatus.COMPLETED.value
                    ])
                )
            )
        )
        today_count, today_sum = today_orders.first()
        today_sum = today_sum or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_orders = await session.execute(
            select(func.count(Order.id), func.sum(Order.total_amount))
            .where(
                and_(
                    func.date(Order.created_at) >= week_ago,
                    Order.status.in_([
                        OrderStatus.CONFIRMED.value,
                        OrderStatus.READY.value,
                        OrderStatus.COMPLETED.value
                    ])
                )
            )
        )
        week_count, week_sum = week_orders.first()
        week_sum = week_sum or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        month_orders = await session.execute(
            select(func.count(Order.id), func.sum(Order.total_amount))
            .where(
                and_(
                    func.date(Order.created_at) >= month_ago,
                    Order.status.in_([
                        OrderStatus.CONFIRMED.value,
                        OrderStatus.READY.value,
                        OrderStatus.COMPLETED.value
                    ])
                )
            )
        )
        month_count, month_sum = month_orders.first()
        month_sum = month_sum or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_orders = await session.execute(
            select(func.count(Order.id))
            .where(Order.status == OrderStatus.PAYMENT_CONFIRMATION.value)
        )
        pending_count = pending_orders.scalar()
        
        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            f"üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {today_count}\n"
            f"‚Ä¢ –°—É–º–º–∞: {today_sum} ‚ÇΩ\n\n"
            f"üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {week_count}\n"
            f"‚Ä¢ –°—É–º–º–∞: {week_sum} ‚ÇΩ\n\n"
            f"üìä <b>–ó–∞ –º–µ—Å—è—Ü:</b>\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {month_count}\n"
            f"‚Ä¢ –°—É–º–º–∞: {month_sum} ‚ÇΩ\n\n"
            f"üîç <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {pending_count} –∑–∞–∫–∞–∑–æ–≤"
        )
        
        keyboard = [
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_panel"}]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )


@router.callback_query(F.data == "admin_menu")
async def show_menu_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"""
    keyboard = [
        [
            {"text": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": "admin_categories"},
            {"text": "üçΩ –ë–ª—é–¥–∞", "callback_data": "admin_dishes"}
        ],
        [
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": "add_dish"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "callback_data": "back_to_admin_panel"}
        ]
    ]
    
    menu_keyboard = {"inline_keyboard": keyboard}
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_categories")
async def show_categories_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).order_by(Category.order_index, Category.name)
        )
        categories = result.scalars().all()
        
        if not categories:
            await callback.message.edit_text(
                "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = []
        for category in categories:
            keyboard.append([{
                "text": f"üìÇ {category.name} ({'‚úÖ' if category.is_available else '‚ùå'})",
                "callback_data": f"edit_category_{category.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
        ])
        
        categories_text = "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        for category in categories:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if category.is_available else "‚ùå –°–∫—Ä—ã—Ç–∞"
            categories_text += f"‚Ä¢ {category.name} - {status}\n"
        
        await callback.message.edit_text(
            categories_text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data == "admin_dishes")
async def show_dishes_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥"""
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).order_by(Category.order_index, Category.name)
        )
        categories = result.scalars().all()
        
        if not categories:
            await callback.message.edit_text(
                "üçΩ <b>–ë–ª—é–¥–∞</b>\n\n"
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "callback_data": "add_category"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for category in categories:
            keyboard.append([{
                "text": f"üìÇ {category.name}",
                "callback_data": f"dishes_in_category_{category.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": "add_dish"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}
        ])
        
        await callback.message.edit_text(
            "üçΩ <b>–ë–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("dishes_in_category_"))
async def show_dishes_in_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = category_result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        dishes_result = await session.execute(
            select(Dish).where(Dish.category_id == category_id).order_by(Dish.name)
        )
        dishes = dishes_result.scalars().all()
        
        if not dishes:
            await callback.message.edit_text(
                f"üçΩ <b>–ë–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category.name}\"</b>\n\n"
                "‚ùå –ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup={"inline_keyboard": [[
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": f"add_dish_to_category_{category_id}"},
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_dishes"}
                ]]},
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        keyboard = []
        for dish in dishes:
            keyboard.append([{
                "text": f"üçΩ {dish.name} ({'‚úÖ' if dish.is_available else '‚ùå'}) - {dish.price}‚ÇΩ",
                "callback_data": f"edit_dish_{dish.id}"
            }])
        
        keyboard.append([
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", "callback_data": f"add_dish_to_category_{category_id}"}
        ])
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_dishes"}
        ])
        
        dishes_text = f"üçΩ <b>–ë–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category.name}\"</b>\n\n"
        for dish in dishes:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if dish.is_available else "‚ùå –°–∫—Ä—ã—Ç–æ"
            dishes_text += f"‚Ä¢ {dish.name} - {dish.price}‚ÇΩ ({status})\n"
        
        await callback.message.edit_text(
            dishes_text,
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("edit_category_"))
async def edit_category(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        keyboard = [
            [
                {"text": "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å" if not category.is_available else "‚ùå –°–∫—Ä—ã—Ç—å", 
                 "callback_data": f"toggle_category_{category_id}"}
            ],
            [
                {"text": "üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "callback_data": f"rename_category_{category_id}"},
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_category_{category_id}"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_categories"}
            ]
        ]
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if category.is_available else "‚ùå –°–∫—Ä—ã—Ç–∞"
        
        await callback.message.edit_text(
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üî¢ –ü–æ—Ä—è–¥–æ–∫: {category.order_index}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("edit_dish_"))
async def edit_dish(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ"""
    dish_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(Dish).where(Dish.id == dish_id)
        )
        dish = result.scalar_one_or_none()
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        keyboard = [
            [
                {"text": "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å" if not dish.is_available else "‚ùå –°–∫—Ä—ã—Ç—å", 
                 "callback_data": f"toggle_dish_{dish_id}"}
            ],
            [
                {"text": "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", "callback_data": f"change_price_{dish_id}"},
                {"text": "üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "callback_data": f"change_description_{dish_id}"}
            ],
            [
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_dish_{dish_id}"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": f"dishes_in_category_{dish.category_id}"}
            ]
        ]
        
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if dish.is_available else "‚ùå –°–∫—Ä—ã—Ç–æ"
        
        await callback.message.edit_text(
            f"üçΩ <b>{dish.name}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: {dish.price}‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {dish.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup={"inline_keyboard": keyboard},
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("toggle_category_"))
async def toggle_category_availability(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.database import Category
        
        result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        category = result.scalar_one_or_none()
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        category.is_available = not category.is_available
        await session.commit()
        
        status = "–ø–æ–∫–∞–∑–∞–Ω–∞" if category.is_available else "—Å–∫—Ä—ã—Ç–∞"
        await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await edit_category(callback)


@router.callback_query(F.data.startswith("toggle_dish_"))
async def toggle_dish_availability(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–ª—é–¥–∞"""
    dish_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        result = await session.execute(
            select(Dish).where(Dish.id == dish_id)
        )
        dish = result.scalar_one_or_none()
        
        if not dish:
            await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        dish.is_available = not dish.is_available
        await session.commit()
        
        status = "–ø–æ–∫–∞–∑–∞–Ω–æ" if dish.is_available else "—Å–∫—Ä—ã—Ç–æ"
        await callback.answer(f"‚úÖ –ë–ª—é–¥–æ {status}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await edit_dish(callback)


@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [
            {"text": "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "callback_data": "admin_pending_orders"},
            {"text": "üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "admin_all_orders"}
        ],
        [
            {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"},
            {"text": "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", "callback_data": "admin_menu"}
        ],
        [
            {"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]
    ]
    
    admin_keyboard = {"inline_keyboard": keyboard}
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status="confirmed")
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "payment_confirmation", "confirmed"
            )
            
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


@router.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        result = await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status="cancelled")
        )
        
        if result.rowcount > 0:
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_result = await session.execute(
                select(Order, User)
                .join(User)
                .where(Order.id == order_id)
            )
            order, user = order_result.first()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, "payment_confirmation", "cancelled"
            )
            
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await show_pending_orders(callback)


@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    keyboard = [
        [{"text": "‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", "callback_data": f"set_status_{order_id}_confirmed"}],
        [{"text": "üçΩ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", "callback_data": f"set_status_{order_id}_ready"}],
        [{"text": "‚úÖ –ì–æ—Ç–æ–≤", "callback_data": f"set_status_{order_id}_completed"}],
        [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"set_status_{order_id}_cancelled"}],
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin_all_orders"}]
    ]
    
    await callback.message.edit_text(
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup={"inline_keyboard": keyboard}
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_status_"))
async def set_order_status(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    parts = callback.data.split("_")
    order_id = int(parts[2])
    new_status = parts[3]
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_order = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = current_order.scalar_one_or_none()
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        old_status = order.status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await session.execute(
            update(Order)
            .where(Order.id == order_id)
            .values(status=new_status)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_result = await session.execute(
            select(User).where(User.id == order.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if user:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            from app.services.notifications import NotificationService
            await NotificationService.notify_order_status_change(
                callback.bot, order, user, old_status, new_status
            )
            
        status_names = {
            "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            "ready": "–ì–æ—Ç–æ–≤–∏—Ç—Å—è", 
            "completed": "–ì–æ—Ç–æ–≤",
            "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
        }
        
        await callback.answer(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_names.get(new_status, new_status)}", 
            show_alert=True
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await show_all_orders(callback)
