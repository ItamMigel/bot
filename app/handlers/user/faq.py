"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è FAQ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.utils import texts, UserStates
from app.keyboards.user import get_main_menu_keyboard
from app.database import async_session_maker, User

router = Router()


@router.message(F.text == texts.BUTTON_FAQ)
@router.callback_query(F.data == "faq")
async def show_faq(event: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
    await state.set_state(UserStates.VIEWING_FAQ)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="faq_delivery")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="faq_payment")],
        [InlineKeyboardButton(text="üì± –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="faq_order")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤", callback_data="faq_statuses")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    if isinstance(event, Message):
        await event.answer(
            texts.FAQ_MAIN_MESSAGE,
            reply_markup=keyboard
        )
    else:
        await event.message.edit_text(
            texts.FAQ_MAIN_MESSAGE,
            reply_markup=keyboard
        )
        await event.answer()


@router.callback_query(F.data.startswith("faq_"))
async def show_faq_answer(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    faq_type = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    faq_answers = {
        "delivery": texts.FAQ_DELIVERY,
        "payment": texts.FAQ_PAYMENT,
        "order": texts.FAQ_ORDER,
        "statuses": texts.FAQ_STATUSES
    }
    
    answer_text = faq_answers.get(faq_type, texts.FAQ_NOT_FOUND)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ FAQ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        answer_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "contact_us")
async def show_contact_form(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await state.set_state(UserStates.WRITING_FEEDBACK)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        texts.CONTACT_FORM_MESSAGE,
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(StateFilter(UserStates.WRITING_FEEDBACK))
async def receive_feedback(message: Message, state: FSMContext, user: User):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_text = message.text.strip()
    
    if len(feedback_text) < 10:
        await message.answer(
            texts.FEEDBACK_TOO_SHORT,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await save_feedback(user, feedback_text)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await notify_admin_feedback(user, feedback_text, message.bot)
    
    await message.answer(
        texts.FEEDBACK_RECEIVED,
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.set_state(UserStates.MAIN_MENU)


async def save_feedback(user: User, feedback_text: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ª–æ–≥ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ë–î)"""
    logging.info(f"Feedback from user {user.telegram_id} ({user.first_name}): {feedback_text}")


async def notify_admin_feedback(user: User, feedback_text: str, bot=None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    try:
        from app.services.notifications import NotificationService
        if bot:
            await NotificationService.notify_feedback(bot, user, feedback_text)
        else:
            logging.info(f"Feedback from user {user.telegram_id}: {feedback_text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ feedback: {e}")
