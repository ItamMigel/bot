"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.utils import texts, UserStates
from app.utils.helpers import format_price
from app.keyboards.user import (
    get_cart_keyboard, get_cart_item_edit_keyboard, 
    get_main_menu_keyboard, get_confirm_action_keyboard
)
from app.database import async_session_maker, User
from app.services.cart import CartService

router = Router()


@router.message(F.text.contains("üõí"), StateFilter("*"))
@router.message(F.text == texts.BUTTON_CART, StateFilter("*"))
@router.callback_query(F.data == "cart")
async def show_cart(event: Message | CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É, —Ç–µ–∫—Å—Ç: {event.text if isinstance(event, Message) else 'callback'}")
    await state.set_state(UserStates.VIEWING_CART)
    
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            # –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
            message_text = texts.CART_EMPTY
            keyboard = get_cart_keyboard([])
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            cart_items_text = []
            for item in cart.items:
                item_text = texts.CART_ITEM_FORMAT.format(
                    dish_name=item.dish.name,
                    quantity=item.quantity,
                    total_price=format_price(item.total_price)
                )
                cart_items_text.append(item_text)
            
            message_text = texts.CART_MESSAGE.format(
                cart_items="\n".join(cart_items_text),
                total_amount=format_price(cart.total_amount)
            )
            keyboard = get_cart_keyboard(cart.items)
    
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(message_text, reply_markup=keyboard)
        await event.answer()
    else:
        await event.answer(message_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("edit_cart_item_"))
async def edit_cart_item(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    item_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass
    
    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_cart_item_edit_keyboard(item_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("cart_increase_"))
async def increase_cart_item(callback: CallbackQuery, user: User):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    item_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
        cart = await CartService.get_cart_with_items(session, user.id)
        if cart:
            for item in cart.items:
                if item.id == item_id:
                    new_quantity = item.quantity + 1
                    if new_quantity <= 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                        await CartService.update_item_quantity(
                            session, user.id, item_id, new_quantity
                        )
                        await session.commit()
                        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
                    else:
                        await callback.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10", show_alert=True)
                    break
        else:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(callback, None, user)


@router.callback_query(F.data.startswith("cart_decrease_"))
async def decrease_cart_item(callback: CallbackQuery, user: User):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    item_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        if cart:
            for item in cart.items:
                if item.id == item_id:
                    new_quantity = item.quantity - 1
                    if new_quantity > 0:
                        await CartService.update_item_quantity(
                            session, user.id, item_id, new_quantity
                        )
                        await session.commit()
                        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
                    else:
                        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0
                        await CartService.remove_item_from_cart(session, user.id, item_id)
                        await session.commit()
                        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                    break
        else:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(callback, None, user)


@router.callback_query(F.data.startswith("cart_set_"))
async def set_cart_item_quantity(callback: CallbackQuery, user: User):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    parts = callback.data.split("_")
    item_id = int(parts[2])
    quantity = int(parts[3])
    
    async with async_session_maker() as session:
        success = await CartService.update_item_quantity(
            session, user.id, item_id, quantity
        )
        if success:
            await session.commit()
            await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quantity}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(callback, None, user)


@router.callback_query(F.data.startswith("cart_remove_"))
async def remove_cart_item(callback: CallbackQuery, user: User):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    item_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        success = await CartService.remove_item_from_cart(session, user.id, item_id)
        if success:
            await session.commit()
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(callback, None, user)


@router.callback_query(F.data == "clear_cart")
async def ask_clear_cart(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    await callback.message.edit_text(
        "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?\n\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.",
        reply_markup=get_confirm_action_keyboard("clear_cart")
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_clear_cart")
async def clear_cart(callback: CallbackQuery, user: User):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    async with async_session_maker() as session:
        success = await CartService.clear_cart(session, user.id)
        if success:
            await session.commit()
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(callback, None, user)


@router.callback_query(F.data == "cancel_clear_cart")
async def cancel_clear_cart(callback: CallbackQuery, user: User):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã"""
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await show_cart(callback, None, user)


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        from app.config import settings
        if cart.total_amount < settings.min_order_amount:
            await callback.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {settings.min_order_amount} ‚ÇΩ",
                show_alert=True
            )
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
    await callback.message.edit_text(
        "üöß –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.MAIN_MENU)
