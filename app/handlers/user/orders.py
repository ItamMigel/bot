"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload

from app.database import async_session_maker, Order, OrderItem, Dish, User, OrderStatus, PaymentStatus
from app.middlewares.admin import AdminMiddleware
from app.middlewares.auth import AuthMiddleware
from app.keyboards.user import (
    get_order_details_keyboard, get_orders_filter_keyboard
)

from app.utils import texts, UserStates
from app.utils.helpers import format_price, format_datetime
from app.keyboards.user import (
    get_main_menu_keyboard, get_payment_method_keyboard, 
    get_order_confirmation_keyboard, get_orders_keyboard,
    get_order_details_keyboard, get_orders_filter_keyboard
)
from app.database import async_session_maker, User, Order, OrderItem
from app.services.cart import CartService

router = Router()


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        from app.config import settings
        if cart.total_amount < settings.min_order_amount:
            await callback.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {settings.min_order_amount} ‚ÇΩ",
                show_alert=True
            )
            return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    cart_items_text = []
    for item in cart.items:
        item_text = texts.CART_ITEM_FORMAT.format(
            dish_name=item.dish.name,
            quantity=item.quantity,
            total_price=format_price(item.total_price)
        )
        cart_items_text.append(item_text)
    
    confirmation_text = texts.ORDER_CONFIRMATION.format(
        cart_items="\n".join(cart_items_text),
        total_amount=format_price(cart.total_amount)
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_order_confirmation_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.CONFIRMING_ORDER)


@router.callback_query(F.data == "confirm_order", StateFilter(UserStates.CONFIRMING_ORDER))
async def confirm_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        texts.PAYMENT_METHOD_MESSAGE,
        reply_markup=get_payment_method_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.CHOOSING_PAYMENT)


@router.callback_query(F.data == "payment_card", StateFilter(UserStates.CHOOSING_PAYMENT))
async def choose_card_payment(callback: CallbackQuery, state: FSMContext, user: User):
    """–í—ã–±—Ä–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        from app.services.order import OrderService
        order = await OrderService.create_order_from_cart(
            session, user.id, payment_method="card"
        )
        await session.commit()
        
        if not order:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    from app.config import settings
    payment_text = texts.PAYMENT_CARD_INFO.format(
        amount=format_price(order.total_amount),
        card_sber=settings.payment_card_sber,
        card_tinkoff=settings.payment_card_tinkoff,
        card_owner=settings.payment_card_owner,
        phone=settings.payment_phone,
        instructions=settings.payment_instructions
    )
    
    await callback.message.edit_text(payment_text, parse_mode="HTML")
    await callback.message.answer(texts.PAYMENT_SCREENSHOT_PROMPT)
    await callback.answer()
    await state.set_state(UserStates.UPLOADING_PAYMENT_SCREENSHOT)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order.id)


@router.message(
    F.content_type == ContentType.PHOTO, 
    StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT)
)
async def receive_payment_screenshot(message: Message, state: FSMContext, user: User):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    from app.utils.helpers import save_payment_screenshot
    screenshot_path = await save_payment_screenshot(message.photo[-1], order_id, message.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    photo_file_id = message.photo[-1].file_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    async with async_session_maker() as session:
        from app.services.order import OrderService
        success = await OrderService.update_payment_screenshot(
            session, order_id, screenshot_path, photo_file_id
        )
        await session.commit()
        
        if success:
            order = await OrderService.get_order_by_id(session, order_id)
            await message.answer(texts.PAYMENT_SCREENSHOT_RECEIVED)
            
            order_created_text = texts.ORDER_CREATED.format(
                order_id=order.id,
                total_amount=format_price(order.total_amount)
            )
            
            await message.answer(
                order_created_text,
                reply_markup=get_main_menu_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
            # await message.answer(texts.DELIVERY_TIMING_NOTICE)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await notify_admin_payment_received(order, user, message.bot)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    
    await state.set_state(UserStates.MAIN_MENU)


@router.message(StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT))
async def handle_non_photo_while_waiting_screenshot(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ —Ñ–æ—Ç–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.set_state(UserStates.MAIN_MENU)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", 
                callback_data="retry_screenshot"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
                callback_data=f"cancel_order_{order_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )
        ]
    ])
    
    await message.answer(
        texts.SCREENSHOT_REQUIRED,
        reply_markup=keyboard
    )


@router.callback_query(F.data == "retry_screenshot", StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT))
async def retry_screenshot_upload(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    await callback.message.edit_text(
        texts.SCREENSHOT_RETRY_MESSAGE
    )
    await callback.answer()
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è UPLOADING_PAYMENT_SCREENSHOT


@router.callback_query(F.data.regexp(r"^cancel_order_\d+$"))
async def cancel_payment_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from sqlalchemy import select
        order_result = await session.execute(
            select(Order).where(Order.id == order_id, Order.user_id == user.id)
        )
        order = order_result.scalar_one_or_none()
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        success = await OrderService.cancel_order(session, order_id, user.id)
        await session.commit()
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
            if order:
                from app.services.notifications import NotificationService
                await NotificationService.notify_order_cancelled(callback.bot, order, user)
                
            await callback.message.edit_text(
                texts.ORDER_CANCELLED.format(order_id=order_id)
            )
            await callback.message.answer(
                "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                texts.ORDER_CANCEL_ERROR
            )
            await callback.message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard()
            )
    
    await callback.answer()
    await state.set_state(UserStates.MAIN_MENU)


@router.message(F.text == texts.BUTTON_ORDERS)
async def show_orders(message: Message, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(UserStates.VIEWING_ORDERS)
    
    await message.answer(
        "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_orders_filter_keyboard()
    )


@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
    await state.clear()
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        order = await OrderService.get_order_details(session, order_id)
        
        if not order or order.user_id != user.id:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        order_items_text = []
        for item in order.items:
            item_text = texts.ORDER_ITEM_FORMAT.format(
                dish_name=item.dish.name,
                quantity=item.quantity,
                total_price=format_price(item.total_price)
            )
            order_items_text.append(item_text)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        payment_info = ""
        if order.payment_method == "card":
            if order.payment_screenshot:
                payment_info = "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (—Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω)"
            else:
                payment_info = "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç)"
        else:
            payment_info = "üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        custom_name_line = ""
        if order.custom_name:
            custom_name_line = f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {order.custom_name}"
        
        order_text = texts.ORDER_DETAILS_MESSAGE.format(
            order_id=order.id,
            custom_name_line=custom_name_line,
            created_at=format_datetime(order.created_at),
            status=texts.ORDER_STATUSES.get(order.status, order.status),
            total_amount=format_price(order.total_amount),
            order_items="\n".join(order_items_text),
            payment_info=payment_info
        )
        
        # –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        can_repeat = order.status in [OrderStatus.COMPLETED.value]
        
        # –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        can_cancel = order.status in ["pending_payment", "payment_received"]
        
        await callback.message.edit_text(
            order_text,
            reply_markup=get_order_details_keyboard(order.id, can_repeat, can_cancel)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("repeat_order_"))
async def repeat_order_prompt_name(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø callback_data
    if callback.data.startswith("repeat_order_skip_"):
        # –≠—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        order_id = int(callback.data.split("_")[3])
        await _process_repeat_order(callback, state, user, order_id, custom_name=None)
        return
    
    order_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(repeat_order_id=order_id)
    await state.set_state(UserStates.SETTING_CUSTOM_ORDER_NAME)
    
    await callback.message.edit_text(
        "üìù <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –±—É–¥—É—â–µ–º.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup={
            "inline_keyboard": [
                [{"text": "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": f"repeat_order_skip_{order_id}"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": f"order_{order_id}"}]
            ]
        },
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("repeat_order_skip_"))
async def repeat_order_skip_name(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    order_id = int(callback.data.split("_")[3])
    await _process_repeat_order(callback, state, user, order_id, custom_name=None)


@router.message(StateFilter(UserStates.SETTING_CUSTOM_ORDER_NAME))
async def process_custom_order_name(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    order_id = data.get("repeat_order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    custom_name = message.text.strip()
    if len(custom_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await _process_repeat_order(message, state, user, order_id, custom_name)


async def _process_repeat_order(callback_or_message, state: FSMContext, user: User, order_id: int, custom_name: str = None):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if custom_name:
            from sqlalchemy import update
            await session.execute(
                update(Order)
                .where(Order.id == order_id)
                .values(custom_name=custom_name)
            )
            await session.commit()
        
        success = await OrderService.repeat_order(session, user.id, order_id)
        await session.commit()
        
        if success:
            message_text = "‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É"
            if custom_name:
                message_text += f"\nüìù –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: '{custom_name}'"
            
            await callback_or_message.answer(message_text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—Ä–∑–∏–Ω–µ
            from app.handlers.user.cart import show_cart
            await show_cart(callback_or_message, state, user)
        else:
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
            if hasattr(callback_or_message, 'answer') and hasattr(callback_or_message.answer, '__code__') and 'show_alert' in callback_or_message.answer.__code__.co_varnames:
                await callback_or_message.answer(error_text, show_alert=True)
            else:
                await callback_or_message.answer(error_text)
    
    await state.clear()


async def notify_admin_new_order(order, user_obj=None, bot=None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        async with async_session_maker() as session:
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ items –∏ dish
            order_result = await session.execute(
                select(Order)
                .options(selectinload(Order.items).selectinload(OrderItem.dish))
                .where(Order.id == order.id)
            )
            full_order = order_result.scalar_one_or_none()
            
            if not full_order:
                logging.error(f"–ó–∞–∫–∞–∑ #{order.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not user_obj:
                user_result = await session.execute(
                    select(User).where(User.id == full_order.user_id)
                )
                user_obj = user_result.scalar_one_or_none()
            
            if user_obj and bot:
                from app.services.notifications import NotificationService
                logging.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{full_order.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_obj.telegram_id}")
                await NotificationService.notify_new_order(bot, full_order, user_obj)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {e}")


async def notify_admin_payment_received(order, user_obj=None, bot=None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        async with async_session_maker() as session:
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ items
            order_result = await session.execute(
                select(Order)
                .options(selectinload(Order.items).selectinload(OrderItem.dish))
                .where(Order.id == order.id)
            )
            full_order = order_result.scalar_one_or_none()
            
            if not full_order:
                logging.error(f"–ó–∞–∫–∞–∑ #{order.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not user_obj:
                user_result = await session.execute(
                    select(User).where(User.id == full_order.user_id)
                )
                user_obj = user_result.scalar_one_or_none()
            
            if user_obj and bot:
                from app.services.notifications import NotificationService
                logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É #{full_order.id}")
                await NotificationService.notify_payment_received(bot, full_order, user_obj)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")


@router.callback_query(F.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        orders = await OrderService.get_user_orders(session, user.id)
        
        if not orders:
            await callback.message.edit_text(
                texts.NO_ORDERS,
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await callback.message.edit_text(
            texts.ORDERS_LIST_MESSAGE,
            reply_markup=get_orders_keyboard(orders)
        )
        await callback.answer()


@router.callback_query(F.data == "orders_active")
async def show_active_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        all_orders = await OrderService.get_user_orders(session, user.id)
        orders = [order for order in all_orders if order.is_active]
        
        if not orders:
            await callback.message.edit_text(
                "üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç\n\n–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.",
                reply_markup=get_orders_filter_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
            reply_markup=get_orders_keyboard(orders, "active")
        )
        await callback.answer()


@router.callback_query(F.data == "orders_completed")
async def show_completed_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        all_orders = await OrderService.get_user_orders(session, user.id)
        orders = [order for order in all_orders if order.is_completed]
        
        if not orders:
            await callback.message.edit_text(
                "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç\n\n–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –≤—Å–µ –æ–Ω–∏ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.",
                reply_markup=get_orders_filter_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
            reply_markup=get_orders_keyboard(orders, "completed")
        )
        await callback.answer()


@router.callback_query(F.data == "orders_saved")
async def show_saved_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        saved_orders = await OrderService.get_user_saved_orders(session, user.id)
        
        from app.keyboards.user import get_saved_orders_keyboard
        
        await callback.message.edit_text(
            "üíæ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
            reply_markup=get_saved_orders_keyboard(saved_orders)
        )
        await callback.answer()


@router.callback_query(F.data == "back_to_order_filters")
async def back_to_order_filters(callback: CallbackQuery, state: FSMContext, user: User):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞–∫–∞–∑–æ–≤"""
    await callback.message.edit_text(
        "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_orders_filter_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("repeat_saved_order_"))
async def repeat_saved_order_directly(callback: CallbackQuery, state: FSMContext, user: User):
    """–ë—ã—Å—Ç—Ä–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è)"""
    order_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∏–º–µ–µ—Ç custom_name
        order = await OrderService.get_order_details(session, order_id)
        if not order or order.user_id != user.id or not order.custom_name:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success = await OrderService.repeat_order(session, user.id, order_id)
        await session.commit()
        
        if success:
            await callback.answer(f"‚úÖ –ó–∞–∫–∞–∑ '{order.custom_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—Ä–∑–∏–Ω–µ
            from app.handlers.user.cart import show_cart
            await show_cart(callback, state, user)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data == "orders_all")
async def show_all_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        orders = await OrderService.get_user_orders(session, user.id)
        
        if not orders:
            await callback.message.edit_text(
                texts.NO_ORDERS,
                reply_markup={
                    "inline_keyboard": [
                        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_orders"}],
                        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                    ]
                }
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
            reply_markup=get_orders_keyboard(orders, "all")
        )
        await callback.answer()


@router.callback_query(F.data.regexp(r"^cancel_order_confirm_\d+$"))
async def confirm_cancel_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data=f"cancel_order_final_{order_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç", 
                callback_data=f"order_details_{order_id}"
            )
        ]
    ])
    
    await callback.message.edit_text(
        f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?\n\n"
        f"–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' –∏–ª–∏ '–û–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'.",
        reply_markup=confirm_keyboard
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^cancel_order_final_\d+$"))
async def final_cancel_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    order_id = int(callback.data.split("_")[3])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from sqlalchemy import select
        order_result = await session.execute(
            select(Order).where(Order.id == order_id, Order.user_id == user.id)
        )
        order = order_result.scalar_one_or_none()
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
        if order.status not in ["pending_payment", "payment_received"]:
            await callback.answer(
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ", 
                show_alert=True
            )
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        success = await OrderService.cancel_order(session, order_id, user.id)
        await session.commit()
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
            try:
                from app.config import settings
                if settings.notification_chat_id:
                    await callback.bot.send_message(
                        settings.notification_chat_id,
                        f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} "
                        f"(@{user.username or '–Ω–µ—Ç'})\n"
                        f"üí∞ –°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n"
                        f"üìä –ë—ã–ª –≤ —Å—Ç–∞—Ç—É—Å–µ: {texts.ORDER_STATUSES.get(order.status, order.status)}"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
                
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω\n\n"
                f"–ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞, —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤."
            )
            await callback.message.answer(
                "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
    
    await state.set_state(UserStates.MAIN_MENU)


@router.callback_query(F.data == "no_action")
async def no_action_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=False)
