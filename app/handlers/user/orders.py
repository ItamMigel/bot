"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.utils import texts, UserStates
from app.utils.helpers import format_price
from app.keyboards.user import (
    get_main_menu_keyboard, get_payment_method_keyboard, 
    get_order_confirmation_keyboard, get_orders_keyboard,
    get_order_details_keyboard
)
from app.database import async_session_maker, User
from app.services.cart import CartService

router = Router()


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        from app.config import settings
        if cart.total_amount < settings.min_order_amount:
            await callback.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {settings.min_order_amount} ‚ÇΩ",
                show_alert=True
            )
            return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    cart_items_text = []
    for item in cart.items:
        item_text = texts.CART_ITEM_FORMAT.format(
            dish_name=item.dish.name,
            quantity=item.quantity,
            total_price=format_price(item.total_price)
        )
        cart_items_text.append(item_text)
    
    confirmation_text = texts.ORDER_CONFIRMATION.format(
        cart_items="\n".join(cart_items_text),
        total_amount=format_price(cart.total_amount)
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_order_confirmation_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.CONFIRMING_ORDER)


@router.callback_query(F.data == "confirm_order", StateFilter(UserStates.CONFIRMING_ORDER))
async def confirm_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        texts.PAYMENT_METHOD_MESSAGE,
        reply_markup=get_payment_method_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.CHOOSING_PAYMENT)


@router.callback_query(F.data == "payment_card", StateFilter(UserStates.CHOOSING_PAYMENT))
async def choose_card_payment(callback: CallbackQuery, state: FSMContext, user: User):
    """–í—ã–±—Ä–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        from app.services.order import OrderService
        order = await OrderService.create_order_from_cart(
            session, user.id, payment_method="card"
        )
        await session.commit()
        
        if not order:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    from app.config import settings
    payment_text = texts.PAYMENT_CARD_INFO.format(
        amount=format_price(order.total_amount),
        card_number=settings.payment_card_number,
        card_owner=settings.payment_card_owner,
        instructions=settings.payment_instructions
    )
    
    await callback.message.edit_text(payment_text)
    await callback.message.answer(texts.PAYMENT_SCREENSHOT_PROMPT)
    await callback.answer()
    await state.set_state(UserStates.UPLOADING_PAYMENT_SCREENSHOT)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order.id)


@router.callback_query(F.data == "payment_cash", StateFilter(UserStates.CHOOSING_PAYMENT))
async def choose_cash_payment(callback: CallbackQuery, state: FSMContext, user: User):
    """–í—ã–±—Ä–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏"""
    async with async_session_maker() as session:
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        from app.services.order import OrderService
        order = await OrderService.create_order_from_cart(
            session, user.id, payment_method="cash"
        )
        await session.commit()
        
        if not order:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    payment_text = texts.PAYMENT_CASH_INFO.format(
        amount=format_price(order.total_amount)
    )
    
    await callback.message.edit_text(payment_text)
    
    order_created_text = texts.ORDER_CREATED.format(
        order_id=order.id,
        total_amount=format_price(order.total_amount)
    )
    
    await callback.message.answer(
        order_created_text,
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
    await state.set_state(UserStates.MAIN_MENU)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    await notify_admin_new_order(order)


@router.message(
    F.content_type == ContentType.PHOTO, 
    StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT)
)
async def receive_payment_screenshot(message: Message, state: FSMContext, user: User):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    from app.utils.helpers import save_payment_screenshot
    screenshot_path = await save_payment_screenshot(message.photo[-1], order_id, message.bot)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    async with async_session_maker() as session:
        from app.services.order import OrderService
        success = await OrderService.update_payment_screenshot(
            session, order_id, screenshot_path
        )
        await session.commit()
        
        if success:
            order = await OrderService.get_order_by_id(session, order_id)
            await message.answer(texts.PAYMENT_SCREENSHOT_RECEIVED)
            
            order_created_text = texts.ORDER_CREATED.format(
                order_id=order.id,
                total_amount=format_price(order.total_amount)
            )
            
            await message.answer(
                order_created_text,
                reply_markup=get_main_menu_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await notify_admin_payment_received(order)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    
    await state.set_state(UserStates.MAIN_MENU)


@router.message(StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT))
async def handle_non_photo_while_waiting_screenshot(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ —Ñ–æ—Ç–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.set_state(UserStates.MAIN_MENU)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", 
                callback_data="retry_screenshot"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
                callback_data=f"cancel_order_{order_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )
        ]
    ])
    
    await message.answer(
        texts.SCREENSHOT_REQUIRED,
        reply_markup=keyboard
    )


@router.callback_query(F.data == "retry_screenshot", StateFilter(UserStates.UPLOADING_PAYMENT_SCREENSHOT))
async def retry_screenshot_upload(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    await callback.message.edit_text(
        texts.SCREENSHOT_RETRY_MESSAGE
    )
    await callback.answer()
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è UPLOADING_PAYMENT_SCREENSHOT


@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_payment_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        success = await OrderService.cancel_order(session, order_id, user.id)
        await session.commit()
        
        if success:
            await callback.message.edit_text(
                texts.ORDER_CANCELLED.format(order_id=order_id)
            )
            await callback.message.answer(
                "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                texts.ORDER_CANCEL_ERROR
            )
            await callback.message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=get_main_menu_keyboard()
            )
    
    await callback.answer()
    await state.set_state(UserStates.MAIN_MENU)


@router.message(F.text == texts.BUTTON_ORDERS)
async def show_orders(message: Message, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(UserStates.VIEWING_ORDERS)
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        orders = await OrderService.get_user_orders(session, user.id)
        
        if not orders:
            await message.answer(
                texts.NO_ORDERS,
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await message.answer(
            texts.ORDERS_LIST_MESSAGE,
            reply_markup=get_orders_keyboard(orders)
        )


@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        order = await OrderService.get_order_details(session, order_id)
        
        if not order or order.user_id != user.id:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        order_items_text = []
        for item in order.items:
            item_text = texts.ORDER_ITEM_FORMAT.format(
                dish_name=item.dish.name,
                quantity=item.quantity,
                total_price=format_price(item.total_price)
            )
            order_items_text.append(item_text)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        payment_info = ""
        if order.payment_method == "card":
            if order.payment_screenshot:
                payment_info = "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (—Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω)"
            else:
                payment_info = "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç)"
        else:
            payment_info = "üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
        
        order_text = texts.ORDER_DETAILS_MESSAGE.format(
            order_id=order.id,
            created_at=order.created_at.strftime("%d.%m.%Y %H:%M"),
            status=texts.ORDER_STATUSES.get(order.status, order.status),
            total_amount=format_price(order.total_amount),
            order_items="\n".join(order_items_text),
            payment_info=payment_info
        )
        
        # –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
        can_repeat = order.status in ["completed", "ready"]
        
        await callback.message.edit_text(
            order_text,
            reply_markup=get_order_details_keyboard(order.id, can_repeat)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("repeat_order_"))
async def repeat_order(callback: CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        from app.services.order import OrderService
        success = await OrderService.repeat_order(session, user.id, order_id)
        await session.commit()
        
        if success:
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ—Ä–∑–∏–Ω–µ
            from app.handlers.user.cart import show_cart
            await show_cart(callback, state, user)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


async def notify_admin_new_order(order):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    logging.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.user_id}")


async def notify_admin_payment_received(order):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É #{order.id}")


@router.callback_query(F.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery, state: FSMContext, user: User):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    async with async_session_maker() as session:
        from app.services.order import OrderService
        orders = await OrderService.get_user_orders(session, user.id)
        
        if not orders:
            await callback.message.edit_text(
                texts.NO_ORDERS,
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await callback.message.edit_text(
            texts.ORDERS_LIST_MESSAGE,
            reply_markup=get_orders_keyboard(orders)
        )
        await callback.answer()
