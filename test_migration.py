"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import logging
from sqlalchemy import select
from app.database import async_session_maker, User, Order, OrderStatus
from app.services.order import OrderService
from app.services.cart import CartService

async def test_order_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...")
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).limit(1))
        user = result.scalar_one_or_none()
        
        if not user:
            print("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = await CartService.get_cart_with_items(session, user.id)
        
        if not cart or not cart.items:
            print("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ...")
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É
            success = await CartService.add_to_cart(session, user.id, 1, 2)
            if success:
                await session.commit()
                cart = await CartService.get_cart_with_items(session, user.id)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {len(cart.items)} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
                return
        
        print(f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {len(cart.items)} —Ç–æ–≤–∞—Ä–æ–≤, —Å—É–º–º–∞: {cart.total_amount} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        try:
            order = await OrderService.create_order_from_cart(
                session, user.id, payment_method="card"
            )
            await session.commit()
            
            if order:
                print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   –°—É–º–º–∞: {order.total_amount} ‚ÇΩ")
                print(f"   –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method}")
                print(f"   –°—Ç–∞—Ç—É—Å: {order.status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                if hasattr(order, 'payment_method') and hasattr(order, 'payment_screenshot'):
                    print("‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è payment_method –∏ payment_screenshot –¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    print("‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            import traceback
            traceback.print_exc()


async def test_order_details():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞...")
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–æ–π –∑–∞–∫–∞–∑ (–Ω–µ –∫–æ—Ä–∑–∏–Ω—É)
        result = await session.execute(
            select(Order)
            .where(Order.status != OrderStatus.CART.value)
            .limit(1)
        )
        order = result.scalar_one_or_none()
        
        if not order:
            print("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            order_details = await OrderService.get_order_details(session, order.id)
            
            if order_details:
                print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_details.id} –ø–æ–ª—É—á–µ–Ω—ã")
                print(f"   –°—É–º–º–∞: {order_details.total_amount} ‚ÇΩ")
                print(f"   –°—Ç–∞—Ç—É—Å: {order_details.status}")
                print(f"   –ü–æ–∑–∏—Ü–∏–π: {len(order_details.items)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ payment_method
                if hasattr(order_details, 'payment_method'):
                    print(f"   –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order_details.payment_method}")
                else:
                    print("‚ùå –ü–æ–ª–µ payment_method –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
            import traceback
            traceback.print_exc()


async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n")
    
    await test_order_creation()
    await test_order_details()
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
